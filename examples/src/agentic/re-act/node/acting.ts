import { graphNode } from 'ts-edge';
import { ReactState } from '../state';
import { models, objectLLM } from '@examples/models';

export const actingNode = graphNode({
  name: 'üõ†Ô∏è acting',
  async execute(state: ReactState): Promise<ReactState> {
    const llm = objectLLM(models.custom.standard);

    // search Tool
    const tool = state.tools.find((tool) => tool.name == state.action.tool);
    if (!tool) throw new Error('Tool Not Found');

    // ÎèÑÍµ¨ ÏûÖÎ†• ÏÉùÏÑ±ÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏ - Í∞ÑÍ≤∞ÌïòÍ≤å ÏàòÏ†ï
    const inputPrompt = `
ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏: "${state.userPrompt}"

ÏÑ†ÌÉùÌïú ÎèÑÍµ¨: "${tool.name}"
ÎèÑÍµ¨ ÏÑ§Î™Ö: ${tool.description}

Ï∂îÎ°†: ${state.thought}

Ïù¥ ÎèÑÍµ¨Î•º Ïã§ÌñâÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöîÌïú ÏûÖÎ†•ÏùÑ Ï†ïÌôïÌïòÍ≤å ÏÉùÏÑ±ÌïòÏÑ∏Ïöî. ÎèÑÍµ¨Ïùò Ïä§ÌÇ§ÎßàÏóê ÎßûÎäî ÌòïÏãùÏúºÎ°ú ÏûÖÎ†•Í∞íÏùÑ Ï†úÍ≥µÌï¥Ïïº Ìï©ÎãàÎã§.`;

    // ÎèÑÍµ¨ Ïä§ÌÇ§ÎßàÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏûÖÎ†• ÏÉùÏÑ±
    const toolInput = await llm(inputPrompt, tool.schema);

    // Tool Ïã§Ìñâ
    const result = await tool.execute(toolInput);

    // Í≤∞Í≥º Ï†ÄÏû•
    const newState = { ...state };

    const stringify = (data: any) => (typeof data === 'string' ? data : JSON.stringify(data));
    newState.action = {
      ...newState.action,
      input: stringify(toolInput),
      output: stringify(result),
    };
    if (state.debug) {
      console.log(`\n\nüõ†Ô∏è ACTING NODE\n`);
      console.log(`ÎèÑÍµ¨    : ${newState.action.tool}`);
      console.log(`input  : ${newState.action.input}`);
      console.log(`output : ${newState.action.output}`);
    }
    return newState;
  },
});
